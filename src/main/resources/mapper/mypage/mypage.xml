<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.haebub.dao.mypage.MypageMapper">
    <!-- 수강중인 강의 리스트 -->
    <select id="lectureListDtos" parameterType="int" resultType="com.haebub.dto.mypage.LectureListDTO">

        <![CDATA[
        SELECT
        pit.lid AS lid
        , ltitle
        ,CASE
        WHEN DATE(lopendate) > DATE(ptime) THEN DATE(lopendate)
        ELSE DATE(ptime) END AS 'startDate'
        , DATE_ADD(
        CASE
        WHEN DATE(lopendate) > DATE(ptime) THEN DATE(lopendate)
        ELSE DATE(ptime) END
        , INTERVAL + lperiod DAY) AS 'endDate'
        , tsubject
        , NAME
        , DATE(NOW()) AS now
        ,
        CASE
            WHEN pit.pistatus = 'refund' THEN 'Refund'
            WHEN
                DATE_ADD(
                    CASE
                    WHEN DATE(lopendate) > DATE(ptime) THEN DATE(lopendate)
                    ELSE DATE(ptime) END
                    , INTERVAL + lperiod DAY) < DATE(NOW()) THEN 'Completed'
            ELSE 'Ongoing'
        END AS status
        , pit.piid as piid
        FROM purchase_test p
        INNER JOIN pitem pit ON p.pid = pit.pid
        INNER JOIN lecture l ON pit.lid = l.lid
        INNER JOIN teacher t ON l.tid = t.tid
        INNER JOIN user u ON t.uid = u.uid
        WHERE p.uid = #{uid}
         ]]>
    </select>
    <!-- 수강 완료 강의 리스트 -->
    <select id="lectureListDtos2" parameterType="int" resultType="com.haebub.dto.mypage.LectureListDTO">
        <!--
        SELECT
                  ltitle
                , DATE(ptime) AS startDate
                , DATE_ADD(DATE(ptime), INTERVAL lperiod DAY) AS endDate
                , tsubject
                , NAME
                , DATE(NOW()) AS now
                , CASE
                    WHEN DATEDIFF(DATE_ADD(DATE(ptime), INTERVAL lperiod DAY), DATE(NOW())) >= 0 THEN 'Ongoing'
                    WHEN DATE(NOW()) > DATE_ADD(DATE(ptime), INTERVAL lperiod DAY) THEN 'Completed' END AS status
        FROM purchase p
            INNER JOIN lecture l ON p.lid = l.lid
            INNER JOIN teacher t ON l.tid = t.tid
            INNER JOIN user u ON t.uid = u.uid
        WHERE  p.uid = #{uid}
        AND DATE(NOW()) > DATE_ADD(DATE(p.ptime), INTERVAL l.lperiod DAY)
        -->


        <![CDATA[
        SELECT
        ltitle
        ,CASE
        WHEN DATE(lopendate) > DATE(ptime) THEN DATE(lopendate)
        ELSE DATE(ptime) END AS 'startDate'
        , DATE_ADD(
        CASE
        WHEN DATE(lopendate) > DATE(ptime) THEN DATE(lopendate)
        ELSE DATE(ptime) END
        , INTERVAL + lperiod DAY) AS 'endDate'
        , tsubject
        , NAME
        , DATE(NOW()) AS now
        ,
        CASE
            WHEN pit.pistatus = 'refund' THEN 'Refund'
            WHEN
                DATE_ADD(
                    CASE
                    WHEN DATE(lopendate) > DATE(ptime) THEN DATE(lopendate)
                    ELSE DATE(ptime) END
                    , INTERVAL + lperiod DAY) < DATE(NOW()) THEN 'Completed'
            ELSE 'Ongoing'
        END AS status
        , pit.piid
        FROM purchase_test p
        INNER JOIN pitem pit ON p.pid=pit.pid
        INNER JOIN lecture l ON pit.lid = l.lid
        INNER JOIN teacher t ON l.tid = t.tid
        INNER JOIN user u ON t.uid = u.uid
        WHERE p.uid = #{uid}
        AND DATE(NOW()) > DATE_ADD(DATE(p.ptime), INTERVAL l.lperiod DAY)
        ]]>
    </select>
    <!-- 로그인한 사용자 uid, nickname 조회 -->
    <select id="getUid" parameterType="string" resultType="com.haebub.dto.User.UserDTO">
        SELECT uid, nickname
        FROM user
        WHERE id = #{id}
    </select>
    <!-- 결제 내역 조회 -->
    <select id="paidList" parameterType="int" resultType="com.haebub.dto.mypage.PaidDTO">

        <![CDATA[
            SELECT ptime
            , l.lid
            , ltitle
            , lprice
            , tsubject
            , u.NAME
            ,CASE
            WHEN DATE(lopendate) > DATE(ptime) THEN DATE(lopendate)
            ELSE DATE(ptime) END AS 'startDate'
            , DATE_ADD(
            CASE
            WHEN DATE(lopendate) > DATE(ptime) THEN DATE(lopendate)
            ELSE DATE(ptime) END
            , INTERVAL + lperiod DAY) AS 'endDate'
            , p.pid
            , pit.piid
            , pit.pistatus
            ,CASE
            WHEN
            CURDATE() <
                DATE_ADD(
            CASE
            WHEN DATE(lopendate) > DATE(ptime) THEN DATE(lopendate)
            ELSE DATE(ptime) END
            ,INTERVAL + 7 DAY)  THEN 'can_refund'
            ELSE 'cannot_refund' END  AS 'can_refund'
            FROM purchase_test p
            INNER JOIN user up ON p.uid = up.uid
            INNER JOIN pitem pit ON p.pid = pit.pid
            INNER JOIN lecture l ON pit.lid = l.lid
            INNER JOIN teacher t ON l.tid = t.tid
            INNER JOIN user u ON t.uid = u.uid
            WHERE p.uid = #{uid};
        ]]>
    </select>
    <!-- 로그인한 사용자 조회 -->
    <select id="getUser" parameterType="int" resultType="com.haebub.dto.User.UserDTO">
        SELECT
        uid
        ,id
        ,name
        ,nickname
        ,email
        ,tel
        ,addr
        FROM user
        where uid = #{uid}
    </select>
    <!-- 회원 정보 수정 -->
    <update id="userModify" parameterType="com.haebub.dto.User.UserDTO">
        UPDATE user
        SET
        id = #{id}
        , name = #{name}
        , nickname = #{nickname}
        , email = #{email}
        , tel = #{tel}
        WHERE uid = #{uid}
    </update>
    <select id="CheckNickname" parameterType="String" resultType="int">
        SELECT count(*)
        from user
        where nickname = #{nickname}
    </select>
</mapper>